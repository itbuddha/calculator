// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
let currentInput = ''; // –¢–µ–∫—É—â–∏–π –≤–≤–æ–¥
let previousValue = null; // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
let currentOperation = null; // –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è

// –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
const display = document.getElementById('display');
const digitButtons = document.querySelectorAll('.digit');
const operatorButtons = document.querySelectorAll('.operation');
const equalsButton = document.querySelector('.equals');
const clearButton = document.querySelector('.clear');

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
function updateDisplay() {
  if (currentInput === '') {
    display.textContent = previousValue !== null ? previousValue : '0';
  } else {
    display.textContent = currentInput;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è —Ü–∏—Ñ—Ä
digitButtons.forEach(btn => {
  btn.addEventListener('click', handleDigitClick.bind(null, btn));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ç–æ—á–∫–∏
document.querySelectorAll('.digit').forEach(btn => {
  if (btn.textContent === '.') {
    btn.addEventListener('click', handleDecimalClick);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
operatorButtons.forEach(btn => {
  btn.addEventListener('click', handleOperatorClick.bind(null, btn));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "="
equalsButton.addEventListener('click', handleEqualsClick);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (AC)
clearButton.addEventListener('click', handleClearClick);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
window.addEventListener('keydown', handleKeyboardEvents);

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
updateDisplay();

// üîß –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è —Ü–∏—Ñ—Ä—ã
function handleDigitClick(btn) {
  if (currentInput.length > 10) return; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —á–∏—Å–ª–∞
  if (currentInput === '0') currentInput = ''; // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –Ω–æ–ª—å
  currentInput += btn.textContent;
  updateDisplay();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è —Ç–æ—á–∫–∏
function handleDecimalClick() {
  if (!currentInput.includes('.')) {
    currentInput += '.';
    updateDisplay();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
function handleOperatorClick(btn) {
  if (currentInput === '') return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (previousValue === null) {
    previousValue = parseFloat(currentInput);
  } else {
    previousValue = compute(previousValue, parseFloat(currentInput), currentOperation);
  }
  currentOperation = btn.dataset.op;
  currentInput = '';
  updateDisplay();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "="
function handleEqualsClick() {
  if (currentOperation && currentInput !== '') {
    previousValue = compute(previousValue, parseFloat(currentInput), currentOperation);
    currentInput = '';
    currentOperation = null;
    updateDisplay();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (AC)
function handleClearClick() {
  currentInput = '';
  previousValue = null;
  currentOperation = null;
  updateDisplay();
}

// –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
function compute(a, b, operation) {
  switch (operation) {
    case '+': return a + b;
    case '-': return a - b;
    case '*': return a * b;
    case '/':
      if (b === 0) {
        alert("–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å");
        return a;
      }
      return a / b;
    default: return b;
  }
}

// üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function handleKeyboardEvents(event) {
  event.preventDefault(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)

  const keyCode = event.key;

  // üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä
  if (/^\d$/.test(keyCode)) {
    const digitButton = Array.from(digitButtons).find(b => b.textContent === keyCode);
    if (digitButton) handleDigitClick(digitButton);
  }

  // üïµÔ∏è‚Äç‚ôÄÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  switch (event.key) {
    case '+': 
      handleOperatorClick(document.querySelector(`[data-op="${event.key}"]`)); 
      break;
    case '-': 
      handleOperatorClick(document.querySelector(`[data-op="${event.key}"]`)); 
      break;
    case '*': 
      handleOperatorClick(document.querySelector(`[data-op="${event.key}"]`)); 
      break;
    case '/': 
      handleOperatorClick(document.querySelector(`[data-op="${event.key}"]`)); 
      break;
    case '=': 
    case 'Enter': 
      handleEqualsClick(); 
      break;
    case '.': 
      handleDecimalClick(); 
      break;
    case 'Escape': 
      handleClearClick(); 
      break;
  }
}